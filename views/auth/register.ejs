<div class="row justify-content-center">
  <div class="col-md-6">
    <div class="card">
      <div class="card-header bg-primary text-white">
        <h3 class="mb-0">Registrer deg</h3>
      </div>
      <div class="card-body">
        <!-- Error alert container at the top for general errors -->
        <div class="alert alert-danger d-none mb-3" id="general-error"></div>
        
        <form id="register-form">
          <div class="mb-3">
            <label for="username" class="form-label">Brukernavn</label>
            <input type="text" class="form-control" id="username" name="username" required minlength="3" maxlength="30">
            <div class="invalid-feedback" id="username-error"></div>
          </div>
          
          <div class="mb-3">
            <label for="email" class="form-label">E-post</label>
            <input type="email" class="form-control" id="email" name="email" required>
            <div class="invalid-feedback" id="email-error"></div>
          </div>
          
          <div class="mb-3">
            <label for="password" class="form-label">Passord</label>
            <input type="password" class="form-control" id="password" name="password" required minlength="6">
            <div class="form-text">Passordet må være minst 6 tegn langt.</div>
            <div class="invalid-feedback" id="password-error"></div>
          </div>
          
          <div class="mb-3">
            <label for="confirmPassword" class="form-label">Bekreft passord</label>
            <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
            <div class="invalid-feedback" id="confirmPassword-error"></div>
          </div>
          
          <div class="d-grid gap-2">
            <button type="submit" class="btn btn-primary">Registrer deg</button>
          </div>
        </form>
        
        <div class="mt-3 text-center">
          <p>Har du allerede en konto? <a href="/auth/login">Logg inn her</a></p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Make sure all elements exist before trying to use them
    const form = document.getElementById('register-form');
    const usernameInput = document.getElementById('username');
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const confirmPasswordInput = document.getElementById('confirmPassword');
    const generalErrorContainer = document.getElementById('general-error');
    
    // Verify that all required elements exist
    if (!form || !usernameInput || !emailInput || !passwordInput || 
        !confirmPasswordInput || !generalErrorContainer) {
      console.error('One or more form elements not found!');
      return; // Exit if elements don't exist
    }
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Reset error messages
      const errorElements = document.querySelectorAll('.invalid-feedback');
      errorElements.forEach(el => el.textContent = '');
      
      const invalidElements = document.querySelectorAll('.is-invalid');
      invalidElements.forEach(el => el.classList.remove('is-invalid'));
      
      if (generalErrorContainer) {
        generalErrorContainer.classList.add('d-none');
      }
      
      // Get form data
      const username = usernameInput.value;
      const email = emailInput.value;
      const password = passwordInput.value;
      const confirmPassword = confirmPasswordInput.value;
      
      // Basic validation
      if (password !== confirmPassword) {
        confirmPasswordInput.classList.add('is-invalid');
        const errorElement = document.getElementById('confirmPassword-error');
        if (errorElement) {
          errorElement.textContent = 'Passordene må være like';
        }
        return;
      }
      
      try {
        // Display loading state
        const submitButton = e.target.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span> Registrerer...';
        
        console.log('Sending registration request to server...');
        
        const response = await fetch('/auth/register', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ username, email, password })
        });
        
        console.log('Response received:', response.status);
        
        const data = await response.json();
        
        // Reset button state
        submitButton.disabled = false;
        submitButton.innerHTML = originalButtonText;
        
        if (!response.ok) {
          console.error('Registration error:', data);
          
          if (data.errors) {
            // Display validation errors
            Object.entries(data.errors).forEach(([field, message]) => {
              const inputElement = document.getElementById(field);
              const errorElement = document.getElementById(`${field}-error`);
              
              if (inputElement && errorElement) {
                inputElement.classList.add('is-invalid');
                errorElement.textContent = message;
              } else if (field === 'general' && generalErrorContainer) {
                generalErrorContainer.textContent = message;
                generalErrorContainer.classList.remove('d-none');
              } else {
                // Fallback for other errors
                if (generalErrorContainer) {
                  generalErrorContainer.textContent = message;
                  generalErrorContainer.classList.remove('d-none');
                }
              }
            });
          } else if (generalErrorContainer) {
            // General error
            generalErrorContainer.textContent = data.message || 'Noe gikk galt ved registrering';
            generalErrorContainer.classList.remove('d-none');
          }
          return;
        }
        
        // Redirect on successful registration
        console.log('Registration successful, redirecting...');
        window.location.href = '/user/dashboard';
      } catch (error) {
        console.error('Error:', error);
        if (generalErrorContainer) {
          generalErrorContainer.textContent = 'Det oppstod en feil ved registrering';
          generalErrorContainer.classList.remove('d-none');
        }
        
        // Reset button state if there was an error
        const submitButton = e.target.querySelector('button[type="submit"]');
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.textContent = 'Registrer deg';
        }
      }
    });
  });
</script>
