<div class="container">
  <div class="row mb-4">
    <div class="col-md-8">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/">Hjem</a></li>
          <li class="breadcrumb-item"><a href="/quiz">Quizzer</a></li>
          <li class="breadcrumb-item active" aria-current="page"><%= quiz.title %></li>
        </ol>
      </nav>
      <h1 class="mb-3"><%= quiz.title %></h1>
      <p class="lead"><%= quiz.description %></p>
      <div class="d-flex mb-4">
        <div class="me-3"><i class="bi bi-tag"></i> <%= quiz.category %></div>
        <div class="me-3"><i class="bi bi-question-circle"></i> <%= quiz.questions.length %> spørsmål</div>
        <div><i class="bi bi-person"></i> Av: <%= quiz.creator.username %></div>
      </div>
    </div>
    <div class="col-md-4 text-end">
      <div class="d-grid gap-2">
        <button id="start-quiz" class="btn btn-lg btn-primary"><i class="bi bi-play-fill"></i> Start quiz</button>
        <a href="/quiz/<%= quiz._id %>/multiplayer" class="btn btn-lg btn-outline-primary">
          <i class="bi bi-people-fill"></i> Spill med andre
        </a>
        <% if (locals.user && quiz.creator._id.toString() === locals.user._id.toString()) { %>
          <a href="/quiz/<%= quiz._id %>/edit" class="btn btn-outline-secondary"><i class="bi bi-pencil"></i> Rediger quiz</a>
        <% } %>
      </div>
    </div>
  </div>
  
  <div class="card mb-5" id="quiz-info">
    <div class="card-header bg-light">
      <h4 class="mb-0">Quiz informasjon</h4>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-4 mb-3">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title"><i class="bi bi-question-circle text-primary"></i> Spørsmål</h5>
              <p class="card-text display-6 text-center"><%= quiz.questions.length %></p>
              <p class="text-muted text-center">spørsmål totalt</p>
            </div>
          </div>
        </div>
        
        <div class="col-md-4 mb-3">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title"><i class="bi bi-clock text-primary"></i> Estimert tid</h5>
              <p class="card-text display-6 text-center"><%= Math.max(5, quiz.questions.length * 2) %></p>
              <p class="text-muted text-center">minutter</p>
            </div>
          </div>
        </div>
        
        <div class="col-md-4 mb-3">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title"><i class="bi bi-calendar-date text-primary"></i> Opprettet</h5>
              <p class="card-text display-6 text-center"><%= new Date(quiz.createdAt).toLocaleDateString('nb-NO') %></p>
              <p class="text-muted text-center">dato</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Quiz taking section - Slide format (Keep this one) -->
  <div id="quiz-container" class="d-none">
    <!-- Progress bar and info -->
    <div class="d-flex justify-content-between align-items-center mb-2">
      <div style="flex-grow: 1; margin-right: 15px;">
        <div class="progress" style="height: 10px;">
          <div id="quiz-progress" class="progress-bar bg-primary" role="progressbar" style="width: 0%"></div>
        </div>
      </div>
      <div class="game-info">
        <span id="question-counter">0/0</span> • 
        <span id="timer-display">00</span>s
      </div>
    </div>
    
    <div class="card mb-4">
      <div class="card-body">
        <h2 id="question-text" class="mb-4">Spørsmål</h2>
        
        <div id="question-image-container" class="text-center mb-4 d-none">
          <img id="question-image" class="img-fluid rounded" alt="Spørsmålsbilde" style="max-height: 250px;">
        </div>
        
        <div id="options-container" class="mb-4">
          <!-- Options will be added dynamically -->
        </div>
        
        <div id="answer-status" class="alert d-none"></div>
      </div>
    </div>
    
    <div class="d-flex justify-content-between">
      <button id="prev-btn" class="btn btn-outline-secondary" disabled>
        <i class="bi bi-arrow-left me-1"></i> Forrige
      </button>
      <button id="next-btn" class="btn btn-primary">
        Neste <i class="bi bi-arrow-right ms-1"></i>
      </button>
    </div>
  </div>
  
  <!-- Results section -->
  <div id="results-container" class="d-none">
    <div class="card">
      <div class="card-header bg-primary text-white">
        <h4 class="mb-0">Ditt resultat</h4>
      </div>
      <div class="card-body text-center py-5">
        <h2 class="mb-4">Du fikk <span id="score">0</span> av <span id="total-points">0</span> poeng!</h2>
        
        <div class="progress mb-4" style="height: 30px;">
          <div id="score-progress" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">0%</div>
        </div>
        
        <div class="mt-4">
          <button id="show-answers" class="btn btn-outline-primary me-2">Se svar og forklaringer</button>
          <button id="retry-quiz" class="btn btn-primary">Ta quizzen på nytt</button>
        </div>
      </div>
    </div>
    
    <div id="answers-container" class="d-none mt-4">
      <!-- Answers will be inserted here -->
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Save quiz data
    const quiz = <%- JSON.stringify(quiz) %>;
    let currentQuestionIndex = 0;
    let userAnswers = Array(quiz.questions.length).fill(null);
    let startTime = null;
    let endTime = null;
    
    // DOM Elements
    const quizInfoSection = document.getElementById('quiz-info');
    const quizContainer = document.getElementById('quiz-container');
    const questionContainer = document.getElementById('options-container');
    const questionText = document.getElementById('question-text');
    const questionImageContainer = document.getElementById('question-image-container');
    const questionImage = document.getElementById('question-image');
    const resultsContainer = document.getElementById('results-container');
    const answersContainer = document.getElementById('answers-container');
    const startQuizBtn = document.getElementById('start-quiz');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    const currentSlideElement = document.getElementById('question-counter');
    const quizProgressBar = document.getElementById('quiz-progress');
    const answerStatus = document.getElementById('answer-status');
    const timerDisplay = document.getElementById('timer-display');
    
    let timerInterval;
    let secondsElapsed = 0;
    
    // Initialize quiz
    startQuizBtn.addEventListener('click', function() {
      // Hide quiz info, show quiz container
      quizInfoSection.classList.add('d-none');
      startQuizBtn.closest('.row').classList.add('d-none');
      quizContainer.classList.remove('d-none');
      
      // Reset answers
      userAnswers = Array(quiz.questions.length).fill(null);
      currentQuestionIndex = 0;
      
      // Record start time
      startTime = new Date();
      secondsElapsed = 0;
      
      // Start timer
      startTimer();
      
      // Show first question
      showQuestion(0);
    });
    
    function startTimer() {
      // Clear any existing timer
      if (timerInterval) {
        clearInterval(timerInterval);
      }
      
      timerInterval = setInterval(() => {
        secondsElapsed++;
        timerDisplay.textContent = secondsElapsed;
      }, 1000);
    }
    
    function stopTimer() {
      if (timerInterval) {
        clearInterval(timerInterval);
      }
      
      // Record end time
      endTime = new Date();
    }
    
    // Navigation buttons
    prevBtn.addEventListener('click', function() {
      if (currentQuestionIndex > 0) {
        saveAnswer();
        showQuestion(currentQuestionIndex - 1);
      }
    });
    
    nextBtn.addEventListener('click', function() {
      saveAnswer();
      
      if (currentQuestionIndex < quiz.questions.length - 1) {
        // Show next question
        showQuestion(currentQuestionIndex + 1);
      } else {
        // Complete quiz
        completeQuiz();
      }
    });
    
    // Save current answer
    function saveAnswer() {
      const question = quiz.questions[currentQuestionIndex];
      
      if (question.questionType === 'multiple-choice' || question.questionType === 'poll') {
        const selectedOption = questionContainer.querySelector('input[type="radio"]:checked');
        userAnswers[currentQuestionIndex] = selectedOption ? parseInt(selectedOption.value) : null;
      } 
      else if (question.questionType === 'true-false') {
        const selectedOption = questionContainer.querySelector('input[type="radio"]:checked');
        userAnswers[currentQuestionIndex] = selectedOption ? selectedOption.value === 'true' : null;
      }
      else if (question.questionType === 'short-answer') {
        const answerInput = questionContainer.querySelector('input[type="text"]');
        userAnswers[currentQuestionIndex] = answerInput ? answerInput.value.trim() : null;
      }
    }
    
    // Show question at specific index
    function showQuestion(index) {
      currentQuestionIndex = index;
      const question = quiz.questions[index];
      
      // Update progress
      currentSlideElement.textContent = `${index + 1}/${quiz.questions.length}`;
      const progressPercentage = ((index + 1) / quiz.questions.length) * 100;
      quizProgressBar.style.width = `${progressPercentage}%`;
      
      // Enable/disable navigation buttons
      prevBtn.disabled = index === 0;
      nextBtn.textContent = index === quiz.questions.length - 1 ? 'Fullfør quiz' : 'Neste';
      
      // Clear previous question content
      questionContainer.innerHTML = '';
      answerStatus.classList.add('d-none');
      
      // Set question text
      questionText.textContent = question.questionText;
      
      // Handle image if present
      if (question.image) {
        questionImage.src = question.image;
        questionImageContainer.classList.remove('d-none');
      } else {
        questionImageContainer.classList.add('d-none');
      }
      
      // Add options based on question type
      if (question.questionType === 'multiple-choice' || question.questionType === 'poll') {
        const optionsHtml = question.options.map((option, idx) => `
          <div class="form-check mb-3">
            <input class="form-check-input" type="radio" name="question-${index}" id="option-${index}-${idx}" value="${idx}" ${userAnswers[index] === idx ? 'checked' : ''}>
            <label class="form-check-label w-100" for="option-${index}-${idx}">
              <div class="card option-card ${userAnswers[index] === idx ? 'border-primary' : ''}">
                <div class="card-body">
                  ${option.text}
                </div>
              </div>
            </label>
          </div>
        `).join('');
        
        questionContainer.innerHTML = optionsHtml;
        
        // Add event listeners for option cards
        document.querySelectorAll('.option-card').forEach(card => {
          card.addEventListener('click', function() {
            const radio = this.closest('label').previousElementSibling;
            radio.checked = true;
            
            // Update styling
            document.querySelectorAll('.option-card').forEach(c => c.classList.remove('border-primary'));
            this.classList.add('border-primary');
          });
        });
      } 
      else if (question.questionType === 'true-false') {
        questionContainer.innerHTML = `
          <div class="row">
            <div class="col-md-6 mb-3">
              <div class="form-check">
                <input class="form-check-input" type="radio" name="question-${index}" id="option-${index}-true" value="true" ${userAnswers[index] === true ? 'checked' : ''}>
                <label class="form-check-label w-100" for="option-${index}-true">
                  <div class="card option-card ${userAnswers[index] === true ? 'border-success' : ''}">
                    <div class="card-body text-center">
                      <h5 class="mb-0">SANT</h5>
                    </div>
                  </div>
                </label>
              </div>
            </div>
            <div class="col-md-6 mb-3">
              <div class="form-check">
                <input class="form-check-input" type="radio" name="question-${index}" id="option-${index}-false" value="false" ${userAnswers[index] === false ? 'checked' : ''}>
                <label class="form-check-label w-100" for="option-${index}-false">
                  <div class="card option-card ${userAnswers[index] === false ? 'border-danger' : ''}">
                    <div class="card-body text-center">
                      <h5 class="mb-0">USANT</h5>
                    </div>
                  </div>
                </label>
              </div>
            </div>
          </div>
        `;
        
        // Add event listeners for option cards
        document.querySelectorAll('.option-card').forEach(card => {
          card.addEventListener('click', function() {
            const radio = this.closest('label').previousElementSibling;
            radio.checked = true;
            
            // Update styling
            document.querySelectorAll('.option-card').forEach(c => {
              c.classList.remove('border-success');
              c.classList.remove('border-danger');
            });
            
            if (radio.value === 'true') {
              this.classList.add('border-success');
            } else {
              this.classList.add('border-danger');
            }
          });
        });
      }
      else if (question.questionType === 'short-answer') {
        questionContainer.innerHTML = `
          <div class="mb-4">
            <label class="form-label">Ditt svar:</label>
            <input type="text" class="form-control form-control-lg" placeholder="Skriv svaret ditt her" value="${userAnswers[index] || ''}">
          </div>
        `;
      }
      
      // Add points info
      questionContainer.innerHTML += `
        <div class="text-muted mt-3">
          <small><i class="bi bi-star-fill text-warning me-1"></i> ${question.points || 1} poeng</small>
        </div>
      `;
    }
    
    // Complete the quiz
    function completeQuiz() {
      // Stop timer
      stopTimer();
      
      // Calculate score
      let score = 0;
      let totalPoints = 0;
      
      // Prepare answers array for submission
      const answers = [];
      
      quiz.questions.forEach((question, index) => {
        const points = question.points || 1;
        
        // Don't count points for poll questions
        if (question.questionType === 'poll') {
          return;
        }
        
        totalPoints += points;
        let isCorrect = false;
        
        if (question.questionType === 'multiple-choice') {
          if (userAnswers[index] !== null && question.options[userAnswers[index]]?.isCorrect) {
            score += points;
            isCorrect = true;
          }
        } 
        else if (question.questionType === 'true-false') {
          const correctAnswer = question.options.find(opt => opt.isCorrect).text === 'Sant';
          if (userAnswers[index] === correctAnswer) {
            score += points;
            isCorrect = true;
          }
        }
        else if (question.questionType === 'short-answer') {
          if (userAnswers[index] && userAnswers[index].toLowerCase() === question.correctAnswer?.toLowerCase()) {
            score += points;
            isCorrect = true;
          }
        }
        
        // Add to answers array
        answers.push({
          questionId: question._id,
          answer: userAnswers[index],
          isCorrect: isCorrect
        });
      });
      
      // Calculate time spent
      const timeSpent = endTime - startTime; // in milliseconds
      
      // Save quiz attempt to database
      if (typeof fetch === 'function') {
        fetch('/attempts/save', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            quizId: quiz._id,
            answers,
            score,
            totalPoints,
            timeSpent
          })
        })
        .then(response => response.json())
        .then(data => console.log('Quiz attempt saved:', data))
        .catch(error => console.error('Error saving quiz attempt:', error));
      }
      
      // Hide quiz container, show results
      quizContainer.classList.add('d-none');
      resultsContainer.classList.remove('d-none');
      
      // Update result display
      document.getElementById('score').textContent = score;
      document.getElementById('total-points').textContent = totalPoints;
      
      const percentage = totalPoints > 0 ? Math.round((score / totalPoints) * 100) : 0;
      const progressBar = document.getElementById('score-progress');
      progressBar.style.width = `${percentage}%`;
      progressBar.textContent = `${percentage}%`;
      
      // Set progress bar color based on score
      if (percentage >= 80) {
        progressBar.classList.add('bg-success');
      } else if (percentage >= 60) {
        progressBar.classList.add('bg-info');
      } else if (percentage >= 40) {
        progressBar.classList.add('bg-warning');
      } else {
        progressBar.classList.add('bg-danger');
      }
      
      // Setup buttons
      document.getElementById('retry-quiz').addEventListener('click', function() {
        resultsContainer.classList.add('d-none');
        answersContainer.classList.add('d-none');
        startQuizBtn.closest('.row').classList.remove('d-none');
        quizInfoSection.classList.remove('d-none');
      });
      
      document.getElementById('show-answers').addEventListener('click', function() {
        showAnswers();
      });
    }
    
    // Show answers
    function showAnswers() {
      answersContainer.classList.remove('d-none');
      
      let html = '<h3 class="mb-4">Gjennomgang av spørsmål</h3>';
      
      quiz.questions.forEach((question, index) => {
        // Skip showing correct/incorrect for poll questions
        const isPoll = question.questionType === 'poll';
        const isCorrect = isPoll ? null : checkIfCorrect(question, userAnswers[index]);
        
        html += `
          <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center ${isPoll ? 'bg-info' : (isCorrect ? 'bg-success' : 'bg-danger')} text-white">
              <h5 class="mb-0">Spørsmål ${index + 1}</h5>
              ${isPoll ? '<span>Meningsmåling</span>' : isCorrect ? '<span>Riktig!</span>' : '<span>Feil</span>'}
            </div>
            <div class="card-body">
              <h5 class="card-title mb-3">${question.questionText}</h5>
              
              ${question.image ? `
                <div class="mb-3 text-center">
                  <img src="${question.image}" class="img-fluid rounded" style="max-height: 200px;" alt="Spørsmålsbilde">
                </div>
              ` : ''}
              
              <div class="row mb-3">
                <div class="col-md-6">
                  <div class="card bg-light">
                    <div class="card-header">Ditt svar</div>
                    <div class="card-body">
                      ${formatUserAnswer(question, userAnswers[index])}
                    </div>
                  </div>
                </div>
                
                ${!isPoll ? `
                  <div class="col-md-6">
                    <div class="card bg-light">
                      <div class="card-header">Riktig svar</div>
                      <div class="card-body">
                        ${formatCorrectAnswer(question)}
                      </div>
                    </div>
                  </div>
                ` : ''}
              </div>
            </div>
          </div>
        `;
      });
      
      answersContainer.innerHTML = html;
      
      // Scroll to answers
      answersContainer.scrollIntoView({ behavior: 'smooth' });
    }
    
    // Check if answer is correct
    function checkIfCorrect(question, userAnswer) {
      if (question.questionType === 'multiple-choice') {
        return userAnswer !== null && question.options[userAnswer].isCorrect;
      } 
      else if (question.questionType === 'true-false') {
        const correctOption = question.options.find(opt => opt.isCorrect);
        const correctAnswer = correctOption?.text === 'Sant';
        return userAnswer === correctAnswer;
      }
      else if (question.questionType === 'short-answer') {
        return userAnswer && userAnswer.toLowerCase() === question.correctAnswer?.toLowerCase();
      }
      return false;
    }
    
    // Format user answer for display
    function formatUserAnswer(question, userAnswer) {
      if (userAnswer === null || userAnswer === undefined || userAnswer === '') {
        return '<em>Ingen svar</em>';
      }
      
      if (question.questionType === 'multiple-choice' || question.questionType === 'poll') {
        return question.options[userAnswer]?.text || '<em>Ukjent alternativ</em>';
      } 
      else if (question.questionType === 'true-false') {
        return userAnswer ? 'Sant' : 'Usant';
      }
      else if (question.questionType === 'short-answer') {
        return userAnswer;
      }
      
      return '<em>Ukjent svarformat</em>';
    }
    
    // Format correct answer for display
    function formatCorrectAnswer(question) {
      if (question.questionType === 'multiple-choice') {
        const correctOptions = question.options.filter(opt => opt.isCorrect);
        if (correctOptions.length === 0) {
          return '<em>Ingen riktig svar definert</em>';
        }
        
        if (correctOptions.length === 1) {
          return correctOptions[0].text;
        }
        
        return `<ul class="mb-0 ps-3">
          ${correctOptions.map(opt => `<li>${opt.text}</li>`).join('')}
        </ul>`;
      } 
      else if (question.questionType === 'true-false') {
        const correctOption = question.options.find(opt => opt.isCorrect);
        return correctOption?.text || '<em>Ukjent svar</em>';
      }
      else if (question.questionType === 'short-answer') {
        return question.correctAnswer || '<em>Ingen riktig svar definert</em>';
      }
      
      return '<em>Ukjent svarformat</em>';
    }
  });
</script>

<style>
  .option-card {
    transition: all 0.2s ease;
    cursor: pointer;
    border-width: 2px;
  }
  
  .option-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  .form-check-input {
    position: absolute;
    opacity: 0;
  }
  
  .game-info {
    font-weight: bold;
    min-width: 100px;
    text-align: right;
  }
</style>
